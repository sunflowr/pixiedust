name: Build/release

on:
  push:
#    branches: 
#      - master
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.14, windows-2016]
        #os: [macos-10.14, windows-2019, ubuntu-18.04]
    steps:
      - uses: actions/checkout@master
        with:
          ref: master
      - uses: actions/setup-node@master
        with:
          node-version: 12.12
      - name: Install dependencies
        run: npm install
      - name: Build Electron
        run: npm run electron:build
      - name: see directory
        run: ls ./dist_electron
      - name: Publish
        run: npx vue-cli-service electron:build --publish always
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #- name: Get the version
      #  id: version
      #  run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      #- name: Create Release
      #  id: create_release
      #  uses: actions/create-release@v1.0.0
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    tag_name: ${{ github.ref }}
      #    release_name: Release ${{ github.ref }}
      #    draft: false
      #    prerelease: false
      #- name: Upload Release Asset
      #  id: upload-release-asset 
      #  uses: actions/upload-release-asset@v1.0.1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #    asset_path: './dist_electron/PixieDust-*.zip'
      #    asset_name: PixieDust-${{ matrix.os }}-.zip
      #    asset_content_type: application/zip
